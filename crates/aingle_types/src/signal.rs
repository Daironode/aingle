//! Signals which can be emitted from within AIngle, out across an interface.
//! There are two main kinds of Signal: system-defined, and app-defined:
//! - App-defined signals are produced via the `emit_signal` host function.
//! - System-defined signals are produced in various places in the system

use crate::impl_from;
<<<<<<< HEAD
use aingle_middleware_bytes::prelude::*;
=======
use aingle_serialized_bytes::prelude::*;
>>>>>>> master
use aingle_zome_types::prelude::*;

/// A Signal is some information emitted from within AIngle out through
/// an Interface
#[derive(Clone, Debug, Serialize, Deserialize, SerializedBytes, PartialEq, Eq)]
pub enum Signal {
    /// Signal from a Cell, generated by `emit_signal`
    App(CellId, AppSignal),
    /// System-defined signals
    System(SystemSignal),
}

/// A Signal which originates from within the AIngle system, as opposed to
/// from within a Cell
///
/// TODO, decide what these will be. For instance, maybe there is a
/// DataAvailable signal for doing async network requests
#[derive(Clone, Debug, Serialize, Deserialize, SerializedBytes, PartialEq, Eq)]
pub enum SystemSignal {
    /// Since we have no real system signals, we use a test signal for testing
    /// TODO: replace instances of this with something real
    Test(String),
}

/// Create a test signal
pub fn test_signal(s: &str) -> Signal {
    SystemSignal::Test(s.to_string()).into()
}

impl_from! {
    SystemSignal => Signal, |s| { Self::System(s) },
}
